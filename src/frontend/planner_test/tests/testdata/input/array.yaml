- sql: |
    values (ARRAY['foo', 'bar']);
  expected_outputs:
  - batch_plan
  - logical_plan
- sql: |
    values (ARRAY[1, 2+3, 4*5+1]);
  expected_outputs:
  - batch_plan
  - logical_plan
- sql: |
    create table t (v1 int);
    select (ARRAY[1, v1]) from t;
  expected_outputs:
  - logical_plan
  - batch_plan
- sql: |
    select ARRAY[null];
  expected_outputs:
  - logical_plan
- sql: |
    select ARRAY[];
  expected_outputs:
  - binder_error
- sql: |
    select ARRAY[]::int[];
  expected_outputs:
  - logical_plan
- sql: |
    select ARRAY[]::int[][];
  expected_outputs:
  - logical_plan
- sql: |
    select ARRAY[]::int;
  expected_outputs:
  - binder_error
- sql: |
    select ARRAY[]::timestamptz[];
  expected_outputs:
  - logical_plan
  - batch_plan
  - stream_plan
- sql: |
    select ARRAY[]::STRUCT<f1 INT>[];
  expected_outputs:
  - logical_plan
  - batch_plan
  - stream_plan
- sql: |
    select array_cat(array[66], array[123]);
  expected_outputs:
  - batch_plan
  - logical_plan
- sql: |
    select array_cat(array[array[66]], array[233]);
  expected_outputs:
  - logical_plan
  - batch_plan
- sql: |
    select array_cat(array[233], array[array[66]]);
  expected_outputs:
  - batch_plan
  - logical_plan
- sql: |
    select array_cat(array[233], array[array[array[66]]]);
  expected_outputs:
  - binder_error
- sql: |
    select array_cat(array[233], 123);
  expected_outputs:
  - binder_error
- sql: |
    select array_cat(123, array[233]);
  expected_outputs:
  - binder_error
- sql: |
    select array_cat(null, null);
  name: array_cat(unknown as text[], unknown as text[]) -> text[]
  expected_outputs:
  - batch_plan
- sql: |
    select array_cat('{a}', '{b}');
  name: array_cat(unknown as text[], unknown as text[]) -> text[]
  expected_outputs:
  - batch_plan
- sql: |
    select array_cat('{a}', '{{b}}') = array['a', '{b}'];
  name: array_cat(unknown as text[], unknown as text[]) -> text[]
  expected_outputs:
  - batch_plan
- sql: |
    select array_cat('{1}', array[2]);
  name: array_cat(unknown as int[], int[]) -> int[]
  expected_outputs:
  - batch_plan
- sql: |
    select array_cat('{1}', 2);
  name: array_cat(unknown, int) -> err
  expected_outputs:
  - binder_error
- sql: |
    select array_append(array[66], 123);
  expected_outputs:
  - batch_plan
  - logical_plan
- sql: |
    select array_append(123, 234);
  expected_outputs:
  - binder_error
- sql: |
    /* Combining multidimensional arrays as such is supported beyond what PostgresSQL allows */
    select array_append(array[array[66]], array[233]);
  expected_outputs:
  - logical_plan
- sql: |
    select array_append(null, null);
  name: array_append(unknown as text[], unknown as text) -> text[]
  expected_outputs:
  - batch_plan
- sql: |
    select array_append('{a}', 'b');
  name: array_append(unknown as text[], unknown as text) -> text[]
  expected_outputs:
  - batch_plan
- sql: |
    select array_append(null, 2);
  name: array_append(unknown as int[], int) -> int[]
  expected_outputs:
  - batch_plan
- sql: |
    select array_append(array[1], null);
  name: array_append(int[], unknown as int) -> int[]
  expected_outputs:
  - batch_plan
- sql: |
    select array_prepend(123, array[66]);
  expected_outputs:
  - batch_plan
  - logical_plan
- sql: |
    select array_prepend(123, 234);
  expected_outputs:
  - binder_error
- sql: |
    select array_prepend(array[233], array[array[66]]);
  expected_outputs:
  - logical_plan
- name: array_contains(int[], int[]) -> bool
  sql: select array[1,2] @> array[2,3];
  expected_outputs:
  - logical_plan
- name: array_contains(int[][], int[]) -> bool
  sql: select array[[1,2]] @> array[2,3];
  expected_outputs:
  - logical_plan
- name: array_contains(int[], int) -> bool
  sql: select array[1,2] @> 2;
  expected_outputs:
  - binder_error
- name: array_contains(int[], varchar[]) -> bool
  sql: select array[2,3] @> array['1'];
  expected_outputs:
  - binder_error
- name: array_contains(int[][], varchar[][]) -> bool
  sql: select array[array[1,2]] @> array[array['2','3']];
  expected_outputs:
  - binder_error  
- name: any contains(null, null) -> bool
  sql: select '{}' @> '{}';
  expected_outputs:
  - binder_error
- name: string from/to varchar[] in implicit context
  sql: |
    values (array['a', 'b']), ('{c,' || 'd}');
  expected_outputs:
  - binder_error
- name: string to varchar[] in assign context
  sql: |
    create table t (v1 varchar[]);
    insert into t values ('{c,' || 'd}');
  expected_outputs:
  - binder_error
- name: string to varchar[] in explicit context
  sql: |
    select ('{c,' || 'd}')::varchar[];
  expected_outputs:
  - logical_plan
- name: unknown to varchar[] in implicit context
  sql: |
    values (array['a', 'b']), ('{c,d}');
  expected_outputs:
  - logical_plan
- name: unknown to varchar[] in assign context
  sql: |
    create table t (v1 varchar[]);
    insert into t values ('{c,d}');
  expected_outputs:
  - logical_plan
- name: unknown to varchar[] in explicit context
  sql: |
    select ('{c,d}')::varchar[];
  expected_outputs:
  - logical_plan
- name: varchar[] to string in assign context
  sql: |
    create table t (v1 varchar);
    insert into t values (array['a', 'b']);
  expected_outputs:
  - logical_plan
- name: varchar[] to string in explicit context
  sql: |
    select array['a', 'b']::varchar;
  expected_outputs:
  - logical_plan
- name: bool[] cast in explicit context
  sql: |
    select array[1, true]::bool[];
  expected_outputs:
  - logical_plan
- name: bool[][] cast in explicit context
  sql: |
    select array[array[1, true]]::bool[][];
  expected_outputs:
  - logical_plan
- name: compare with null
  sql: |
    select null = array[1];
  expected_outputs:
  - logical_plan
- name: compare with literal
  sql: |
    select array[1] = '{1}';
  expected_outputs:
  - logical_plan
- name: compare with different type
  sql: |
    select array[1] = array[1.2];
  expected_outputs:
  - binder_error
